// Generated by gencpp from file scale_truck_control/lrc2ocr.msg
// DO NOT EDIT!


#ifndef SCALE_TRUCK_CONTROL_MESSAGE_LRC2OCR_H
#define SCALE_TRUCK_CONTROL_MESSAGE_LRC2OCR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scale_truck_control
{
template <class ContainerAllocator>
struct lrc2ocr_
{
  typedef lrc2ocr_<ContainerAllocator> Type;

  lrc2ocr_()
    : index(0)
    , steer_angle(0.0)
    , cur_dist(0.0)
    , tar_dist(0.0)
    , tar_vel(0.0)
    , pred_vel(0.0)
    , alpha(false)  {
    }
  lrc2ocr_(const ContainerAllocator& _alloc)
    : index(0)
    , steer_angle(0.0)
    , cur_dist(0.0)
    , tar_dist(0.0)
    , tar_vel(0.0)
    , pred_vel(0.0)
    , alpha(false)  {
  (void)_alloc;
    }



   typedef int32_t _index_type;
  _index_type index;

   typedef float _steer_angle_type;
  _steer_angle_type steer_angle;

   typedef float _cur_dist_type;
  _cur_dist_type cur_dist;

   typedef float _tar_dist_type;
  _tar_dist_type tar_dist;

   typedef float _tar_vel_type;
  _tar_vel_type tar_vel;

   typedef float _pred_vel_type;
  _pred_vel_type pred_vel;

   typedef uint8_t _alpha_type;
  _alpha_type alpha;





  typedef boost::shared_ptr< ::scale_truck_control::lrc2ocr_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scale_truck_control::lrc2ocr_<ContainerAllocator> const> ConstPtr;

}; // struct lrc2ocr_

typedef ::scale_truck_control::lrc2ocr_<std::allocator<void> > lrc2ocr;

typedef boost::shared_ptr< ::scale_truck_control::lrc2ocr > lrc2ocrPtr;
typedef boost::shared_ptr< ::scale_truck_control::lrc2ocr const> lrc2ocrConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scale_truck_control::lrc2ocr_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scale_truck_control::lrc2ocr_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scale_truck_control::lrc2ocr_<ContainerAllocator1> & lhs, const ::scale_truck_control::lrc2ocr_<ContainerAllocator2> & rhs)
{
  return lhs.index == rhs.index &&
    lhs.steer_angle == rhs.steer_angle &&
    lhs.cur_dist == rhs.cur_dist &&
    lhs.tar_dist == rhs.tar_dist &&
    lhs.tar_vel == rhs.tar_vel &&
    lhs.pred_vel == rhs.pred_vel &&
    lhs.alpha == rhs.alpha;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scale_truck_control::lrc2ocr_<ContainerAllocator1> & lhs, const ::scale_truck_control::lrc2ocr_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scale_truck_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::scale_truck_control::lrc2ocr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scale_truck_control::lrc2ocr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scale_truck_control::lrc2ocr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scale_truck_control::lrc2ocr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scale_truck_control::lrc2ocr_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scale_truck_control::lrc2ocr_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scale_truck_control::lrc2ocr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4df4cc808fb5dda1620117e19736ec90";
  }

  static const char* value(const ::scale_truck_control::lrc2ocr_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4df4cc808fb5dda1ULL;
  static const uint64_t static_value2 = 0x620117e19736ec90ULL;
};

template<class ContainerAllocator>
struct DataType< ::scale_truck_control::lrc2ocr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scale_truck_control/lrc2ocr";
  }

  static const char* value(const ::scale_truck_control::lrc2ocr_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scale_truck_control::lrc2ocr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 index\n"
"float32 steer_angle\n"
"float32 cur_dist\n"
"float32 tar_dist\n"
"float32 tar_vel\n"
"float32 pred_vel\n"
"bool alpha\n"
;
  }

  static const char* value(const ::scale_truck_control::lrc2ocr_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scale_truck_control::lrc2ocr_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.index);
      stream.next(m.steer_angle);
      stream.next(m.cur_dist);
      stream.next(m.tar_dist);
      stream.next(m.tar_vel);
      stream.next(m.pred_vel);
      stream.next(m.alpha);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lrc2ocr_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scale_truck_control::lrc2ocr_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scale_truck_control::lrc2ocr_<ContainerAllocator>& v)
  {
    s << indent << "index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.index);
    s << indent << "steer_angle: ";
    Printer<float>::stream(s, indent + "  ", v.steer_angle);
    s << indent << "cur_dist: ";
    Printer<float>::stream(s, indent + "  ", v.cur_dist);
    s << indent << "tar_dist: ";
    Printer<float>::stream(s, indent + "  ", v.tar_dist);
    s << indent << "tar_vel: ";
    Printer<float>::stream(s, indent + "  ", v.tar_vel);
    s << indent << "pred_vel: ";
    Printer<float>::stream(s, indent + "  ", v.pred_vel);
    s << indent << "alpha: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.alpha);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCALE_TRUCK_CONTROL_MESSAGE_LRC2OCR_H
