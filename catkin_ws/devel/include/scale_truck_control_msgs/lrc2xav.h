// Generated by gencpp from file scale_truck_control_msgs/lrc2xav.msg
// DO NOT EDIT!


#ifndef SCALE_TRUCK_CONTROL_MSGS_MESSAGE_LRC2XAV_H
#define SCALE_TRUCK_CONTROL_MSGS_MESSAGE_LRC2XAV_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scale_truck_control_msgs
{
template <class ContainerAllocator>
struct lrc2xav_
{
  typedef lrc2xav_<ContainerAllocator> Type;

  lrc2xav_()
    : cur_vel(0.0)  {
    }
  lrc2xav_(const ContainerAllocator& _alloc)
    : cur_vel(0.0)  {
  (void)_alloc;
    }



   typedef float _cur_vel_type;
  _cur_vel_type cur_vel;





  typedef boost::shared_ptr< ::scale_truck_control_msgs::lrc2xav_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scale_truck_control_msgs::lrc2xav_<ContainerAllocator> const> ConstPtr;

}; // struct lrc2xav_

typedef ::scale_truck_control_msgs::lrc2xav_<std::allocator<void> > lrc2xav;

typedef boost::shared_ptr< ::scale_truck_control_msgs::lrc2xav > lrc2xavPtr;
typedef boost::shared_ptr< ::scale_truck_control_msgs::lrc2xav const> lrc2xavConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scale_truck_control_msgs::lrc2xav_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scale_truck_control_msgs::lrc2xav_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scale_truck_control_msgs::lrc2xav_<ContainerAllocator1> & lhs, const ::scale_truck_control_msgs::lrc2xav_<ContainerAllocator2> & rhs)
{
  return lhs.cur_vel == rhs.cur_vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scale_truck_control_msgs::lrc2xav_<ContainerAllocator1> & lhs, const ::scale_truck_control_msgs::lrc2xav_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scale_truck_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::scale_truck_control_msgs::lrc2xav_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scale_truck_control_msgs::lrc2xav_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scale_truck_control_msgs::lrc2xav_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scale_truck_control_msgs::lrc2xav_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scale_truck_control_msgs::lrc2xav_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scale_truck_control_msgs::lrc2xav_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scale_truck_control_msgs::lrc2xav_<ContainerAllocator> >
{
  static const char* value()
  {
    return "647f32150b8255f1e2582744b0be8476";
  }

  static const char* value(const ::scale_truck_control_msgs::lrc2xav_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x647f32150b8255f1ULL;
  static const uint64_t static_value2 = 0xe2582744b0be8476ULL;
};

template<class ContainerAllocator>
struct DataType< ::scale_truck_control_msgs::lrc2xav_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scale_truck_control_msgs/lrc2xav";
  }

  static const char* value(const ::scale_truck_control_msgs::lrc2xav_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scale_truck_control_msgs::lrc2xav_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 cur_vel\n"
;
  }

  static const char* value(const ::scale_truck_control_msgs::lrc2xav_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scale_truck_control_msgs::lrc2xav_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cur_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lrc2xav_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scale_truck_control_msgs::lrc2xav_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scale_truck_control_msgs::lrc2xav_<ContainerAllocator>& v)
  {
    s << indent << "cur_vel: ";
    Printer<float>::stream(s, indent + "  ", v.cur_vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCALE_TRUCK_CONTROL_MSGS_MESSAGE_LRC2XAV_H
